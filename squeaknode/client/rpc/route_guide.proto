// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.routeguide";
option java_outer_classname = "RouteGuideProto";
option objc_class_prefix = "RTG";

package routeguide;

// Interface exported by the server.
service RouteGuide {

  /** sqk: `walletbalance`
  WalletBalance returns total unspent outputs(confirmed and unconfirmed), all
  confirmed unspent outputs and all unconfirmed unspent outputs under control
  of the wallet.
  */
  rpc WalletBalance (WalletBalanceRequest) returns (WalletBalanceResponse) {}

  /** sqk: `addpeer`
  */
  rpc ConnectHost (ConnectHostRequest) returns (ConnectHostResponse) {}

  /** sqk: `disconnectpeer`
  */
  rpc DisconnectPeer (DisconnectPeerRequest) returns (DisconnectPeerResponse) {}

  /** sqk: `listpeers`
  ListPeers returns a verbose listing of all currently active peers.
  */
  rpc ListPeers (ListPeersRequest) returns (ListPeersResponse) {}

  /** sqk: `makesqueak`
  */
  rpc MakeSqueak (MakeSqueakRequest) returns (MakeSqueakResponse) {}

  /** sqk: `getsqueak`
  */
  rpc GetSqueak (GetSqueakRequest) returns (GetSqueakResponse) {}

  /** sqk: `generatesigningKey`
  */
  rpc GenerateSigningKey (GenerateSigningKeyRequest) returns (GenerateSigningKeyResponse) {}
}

message WalletBalanceRequest {
}

message WalletBalanceResponse {
    /// The balance of the wallet
    int64 total_balance = 1;

    /// The confirmed balance of a wallet(with >= 1 confirmations)
    int64 confirmed_balance = 2;

    /// The unconfirmed balance of a wallet(with 0 confirmations)
    int64 unconfirmed_balance = 3;
}

// message GetPeersRequest {
// }

// message GetPeersResponse {
//     /// The balance of the wallet
//     int64 total_balance = 1 [json_name = "total_balance"];

//     /// The confirmed balance of a wallet(with >= 1 confirmations)
//     int64 confirmed_balance = 2 [json_name = "confirmed_balance"];

//     /// The unconfirmed balance of a wallet(with 0 confirmations)
//     int64 unconfirmed_balance = 3 [json_name = "unconfirmed_balance"];
// }

message ConnectHostRequest {
    // The address of the peer to add.
    string host = 1;
}

message ConnectHostResponse {
}

message DisconnectPeerRequest {
    Addr addr = 1;
}

message DisconnectPeerResponse {
}

message ListPeersRequest {
}

message ListPeersResponse {
    /// The list of currently connected peers
    repeated Peer peers = 1;
}

message MakeSqueakRequest {
    /// Content of the squeak to be made.
    string content = 1;
}

message GetSqueakRequest {
    /// Hash of the squeak to get.
    bytes hash = 1;
}

message MakeSqueakResponse {
    /// The squeak.
    Squeak squeak = 1;
}

message GetSqueakResponse {
    /// The squeak.
    Squeak squeak = 1;
}

message GenerateSigningKeyRequest {}

message GenerateSigningKeyResponse {
    /// Address of the signing key.
    string address = 1;
}

message Addr {
  string host = 1;

  uint64 port = 2;
}

message Peer {
    /// Address
    Addr addr = 1;

    /// Bytes of data transmitted to this peer
    uint64 bytes_sent = 2;

    /// Bytes of data transmitted from this peer
    uint64 bytes_recv = 3;

    /// Satoshis sent to this peer
    int64 sat_sent = 4;

    /// Satoshis received from this peer
    int64 sat_recv = 5;

    /// A channel is inbound if the counterparty initiated the connection
    bool inbound = 6;

    /// Ping time to this peer
    int64 ping_time = 7;
}

message Squeak {
    /// Hash of the squeak.
    bytes hash = 1;

    /// Serialized squeak.
    bytes serialized_squeak = 2;
}
