syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.github.yzernik.squeakserver";
option java_outer_classname = "SqueakAdminProto";
option objc_class_prefix = "SQK";

package squeakserver;

import "proto/lnd.proto";

// Interface exported by the server.
service SqueakAdmin {

  rpc SayHello (HelloRequest) returns (HelloReply);

  /** sqkadmin: `lndgetinfo`
  */
  rpc LndGetInfo (lnrpc.GetInfoRequest) returns (lnrpc.GetInfoResponse) {}

  /** sqkadmin: `lndwalletbalance`
  */
  rpc LndWalletBalance (lnrpc.WalletBalanceRequest) returns (lnrpc.WalletBalanceResponse) {}

  /** sqkadmin: `createsigningprofile`
  */
  rpc CreateSigningProfile (CreateSigningProfileRequest) returns (CreateSigningProfileReply) {}

  /** sqkadmin: `createcontactprofile`
  */
  rpc CreateContactProfile (CreateContactProfileRequest) returns (CreateContactProfileReply) {}

  /** sqkadmin: `getsigningprofiles`
  */
  rpc GetSigningProfiles (GetSigningProfilesRequest) returns (GetSigningProfilesReply) {}

  /** sqkadmin: `getcontactprofiles`
  */
  rpc GetContactProfiles (GetContactProfilesRequest) returns (GetContactProfilesReply) {}

  /** sqkadmin: `getsqueakprofile`
  */
  rpc GetSqueakProfile (GetSqueakProfileRequest) returns (GetSqueakProfileReply) {}

  /** sqkadmin: `getsqueakprofilebyaddress`
  */
  rpc GetSqueakProfileByAddress (GetSqueakProfileByAddressRequest) returns (GetSqueakProfileByAddressReply) {}

  /** sqkadmin: `setsqueakprofilewhitelisted`
  */
  rpc SetSqueakProfileWhitelisted (SetSqueakProfileWhitelistedRequest) returns (SetSqueakProfileWhitelistedReply) {}

  /** sqkadmin: `setsqueakprofilefollowing`
  */
  rpc SetSqueakProfileFollowing (SetSqueakProfileFollowingRequest) returns (SetSqueakProfileFollowingReply) {}

  /** sqkadmin: `setsqueakprofilesharing`
  */
  rpc SetSqueakProfileSharing (SetSqueakProfileSharingRequest) returns (SetSqueakProfileSharingReply) {}

  /** sqkadmin: `makesqueak`
  */
  rpc MakeSqueak (MakeSqueakRequest) returns (MakeSqueakReply) {}

  /** sqkadmin: `getsqueakdisplay`
  */
  rpc GetSqueakDisplay (GetSqueakDisplayRequest) returns (GetSqueakDisplayReply) {}

  /** sqkadmin: `getfollowedsqueakdisplays`
  */
  rpc GetFollowedSqueakDisplays (GetFollowedSqueakDisplaysRequest) returns (GetFollowedSqueakDisplaysReply) {}

  /** sqkadmin: `getaddresssqueakdisplays`
  */
  rpc GetAddressSqueakDisplays (GetAddressSqueakDisplaysRequest) returns (GetAddressSqueakDisplaysReply) {}

  /** sqkadmin: `getancestorsqueakdisplays`
  */
  rpc GetAncestorSqueakDisplays (GetAncestorSqueakDisplaysRequest) returns (GetAncestorSqueakDisplaysReply) {}

}

message HelloRequest {
  string name = 1;
}

message HelloReply {
  string message = 1;
}

message CreateSigningProfileRequest {
    /// The name of the new signing profile
    string profile_name = 1;
}

message CreateSigningProfileReply {
    /// The profile id
    int32 profile_id = 1;
}

message CreateContactProfileRequest {
    /// The name of the new signing profile
    string profile_name = 1;

    /// The address
    string address = 2;
}

message CreateContactProfileReply {
    /// The profile id
    int32 profile_id = 1;
}

message GetSigningProfilesRequest {
}

message GetSigningProfilesReply {
    /// The squeak profiles
    repeated SqueakProfile squeak_profiles = 1;
}

message GetContactProfilesRequest {
}

message GetContactProfilesReply {
    /// The squeak profiles
    repeated SqueakProfile squeak_profiles = 1;
}

message GetSqueakProfileRequest {
    /// The profile id
    int32 profile_id = 1;
}

message GetSqueakProfileReply {
    /// The squeak profile
    SqueakProfile squeak_profile = 1;
}

message GetSqueakProfileByAddressRequest {
    /// The address
    string address = 1;
}

message GetSqueakProfileByAddressReply {
    /// The squeak profile
    SqueakProfile squeak_profile = 1;
}

message SetSqueakProfileWhitelistedRequest {
    /// The profile id
    int32 profile_id = 1;

    /// Whitelisted
    bool whitelisted = 2;
}

message SetSqueakProfileWhitelistedReply {
}

message SetSqueakProfileFollowingRequest {
    /// The profile id
    int32 profile_id = 1;

    /// Following
    bool following = 2;
}

message SetSqueakProfileFollowingReply {
}

message SetSqueakProfileSharingRequest {
    /// The profile id
    int32 profile_id = 1;

    /// Sharing
    bool sharing = 2;
}

message SetSqueakProfileSharingReply {
}

message SqueakProfile {
    /// The profile id
    int32 profile_id = 1;

    /// The profile name
    string profile_name = 2;

    /// Has private key
    bool has_private_key = 3;

    /// The address
    string address = 4;

    /// Sharing
    bool sharing = 5;

    /// Following
    bool following = 6;

    /// Whitelisted
    bool whitelisted = 7;
}

message MakeSqueakRequest {
    /// The profile id
    int32 profile_id = 1;

    /// The content
    string content = 2;

    /// The replyto hash
    string replyto = 3;
}

message MakeSqueakReply {
    /// Hash of the created squeak.
    string squeak_hash = 1;
}

message GetSqueakDisplayRequest {
    /// Hash of the squeak.
    string squeak_hash = 1;
}

message GetSqueakDisplayReply {
    /// The squeak display entry
    SqueakDisplayEntry squeak_display_entry = 1;
}

message SqueakDisplayEntry {
    /// The squeak hash.
    string squeak_hash = 1;

    /// Is unlocked
    bool is_unlocked = 2;

    /// The decrypted content
    string content_str = 3;

    /// Is reply
    bool is_reply = 4;

    /// Reply to hash
    string reply_to = 5;

    /// Block height
    int32 block_height = 6;

    /// Block time
    int64 block_time = 7;

    /// Is author address known
    bool is_author_known = 8;

    /// The author name
    string author_address = 9;

    /// The author name
    string author_name = 10;
}

message GetFollowedSqueakDisplaysRequest {
}

message GetFollowedSqueakDisplaysReply {
    /// Multiple squeak display entries
    repeated SqueakDisplayEntry squeak_display_entries = 1;
}

message GetAddressSqueakDisplaysRequest {
    /// The address
    string address = 1;
}

message GetAddressSqueakDisplaysReply {
    /// Multiple squeak display entries
    repeated SqueakDisplayEntry squeak_display_entries = 1;
}

message GetAncestorSqueakDisplaysRequest {
    /// Hash of the squeak.
    string squeak_hash = 1;
}

message GetAncestorSqueakDisplaysReply {
    /// Multiple squeak display entries
    repeated SqueakDisplayEntry squeak_display_entries = 1;
}
