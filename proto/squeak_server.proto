syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.github.yzernik.squeaknode";
option java_outer_classname = "SqueakProto";
option objc_class_prefix = "SQK";

package squeaknode;

// Interface exported by the server.
service SqueakServer {

  /** sqk: `postsqueak`
  */
  rpc PostSqueak (PostSqueakRequest) returns (PostSqueakReply) {}

  /** sqk: `getsqueak`
  */
  rpc GetSqueak (GetSqueakRequest) returns (GetSqueakReply) {}

  /** sqk: `lookupsqueaks`
  */
  rpc LookupSqueaks (LookupSqueaksRequest) returns (LookupSqueaksReply) {}

  /** sqk: `lookupsqueakstodownload`
  */
  rpc LookupSqueaksToDownload (LookupSqueaksToDownloadRequest) returns (LookupSqueaksToDownloadReply) {}

  /** sqk: `getoffer`
  */
  rpc GetOffer (GetOfferRequest) returns (GetOfferReply) {}

}

message PostSqueakRequest {
    /// Content of the squeak to be made.
    Squeak squeak = 1;
}

message GetSqueakRequest {
    /// Hash of the squeak to get.
    bytes hash = 1;
}

message LookupSqueaksRequest {
    /// List of the author addresses
    repeated string addresses = 1;
    /// Minimum block to look for
    int32 min_block = 2;
    /// Maximum block to look for
    int32 max_block = 3;
}

message LookupSqueaksToDownloadRequest {
    /// List of the author addresses
    repeated string addresses = 1;
    /// Minimum block to look for
    int32 min_block = 2;
    /// Maximum block to look for
    int32 max_block = 3;
}

message GetOfferRequest {
    /// Hash of the squeak to buy.
    bytes hash = 1;
}

message PostSqueakReply {
}

message GetSqueakReply {
    /// The squeak.
    Squeak squeak = 1;
}

message LookupSqueaksReply {
    /// Height of the latest block.
    int32 latest_block_height = 1;

    /// Hash of the squeak to get.
    repeated bytes hashes = 2;

    /// Hash of the squeak to get.
    repeated string allowed_addresses = 3;
}

message LookupSqueaksToDownloadReply {
    /// Hash of the squeak to get.
    repeated bytes hashes = 1;
}

message GetOfferReply {
    /// The offer
    Offer offer = 1;
}

message Squeak {
    /// Hash of the squeak.
    bytes hash = 1;

    /// Serialized squeak.
    bytes serialized_squeak = 2;
}

message Offer {
    /// The squeak hash.
    bytes squeak_hash = 1;

    /// Nonce
    bytes nonce = 2;

    /// The invoice
    string payment_request = 3;

    /// The host of the seller lightning node
    string host = 4;

    /// The port of the seller lightning node
    int32 port = 5;
}

// message Interested {
//     /// List of the author addresses
//     repeated string addresses = 1;
//     /// Minimum block to look for
//     int32 min_block = 2;
//     /// Maximum block to look for
//     int32 max_block = 3;
// }
